// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String                @id @default(cuid())
    name                 String?
    email                String?               @unique
    emailVerified        DateTime?
    image                String?
    role                 UserRole
    accounts             Account[]
    sessions             Session[]
    organisations        Organisation[]
    organisationUsers    OrganisationUser[]
    projects             Project[]
    beForms              BEForm[]
    projectUsers         ProjectUser[]
    formUsers            FormUser[]
    formQuestionComments FormQuestionComment[]
    threadItems          ThreadItem[]
    formQuestionVotes    FormQuestionVote[]
    questionResources    QuestionResource[]
    formTemplates        FormTemplate[]
    templateResources    TemplateResource[]
    whiteboards          Whiteboard[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organisation {
    id                String             @id @default(cuid())
    name              String
    uen               String
    createdById       String
    createdBy         User               @relation(fields: [createdById], references: [id])
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    organisationUsers OrganisationUser[]
    projects          Project[]
}

model OrganisationUser {
    id             String       @id @default(cuid())
    organisation   Organisation @relation(fields: [organisationId], references: [id])
    organisationId String
    user           User         @relation(fields: [userId], references: [id])
    userId         String
    role           RoleInOrg
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Project {
    id             String        @id @default(cuid())
    name           String
    sector         Sector
    organisation   Organisation  @relation(fields: [organisationId], references: [id])
    organisationId String
    BEForm         BEForm[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    createdBy      User          @relation(fields: [createdById], references: [id])
    createdById    String
    projectUsers   ProjectUser[]
}

model ProjectUser {
    id        String   @id @default(cuid())
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BEForm {
    id            String         @id @default(cuid())
    name          String
    project       Project        @relation(fields: [projectId], references: [id])
    projectId     String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdBy     User           @relation(fields: [createdById], references: [id])
    createdById   String
    formUsers     FormUser[]
    formQuestions FormQuestion[]
    whiteboards   Whiteboard[]
}

model FormUser {
    id               String            @id @default(cuid())
    form             BEForm            @relation(fields: [formId], references: [id])
    formId           String
    user             User              @relation(fields: [userId], references: [id])
    userId           String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    formUserSections FormUserSection[]
    auditLogs        AuditLog[]
}

model FormUserSection {
    id            String      @id @default(cuid())
    formUser      FormUser    @relation(fields: [formUserId], references: [id])
    formUserId    String
    formSection   FormSection @relation(fields: [formSectionId], references: [id])
    formSectionId String
}

model FormSection {
    id               String            @id @default(cuid())
    name             String
    formUserSections FormUserSection[]
    questions        Question[]
}

model Question {
    id                String             @id @default(cuid())
    question          String
    formSection       FormSection        @relation(fields: [formSectionId], references: [id])
    formSectionId     String
    formQuestions     FormQuestion[]
    templateResources TemplateResource[]
}

model FormQuestion {
    id                      String                    @id @default(cuid())
    question                Question                  @relation(fields: [questionId], references: [id])
    questionId              String
    beForm                  BEForm                    @relation(fields: [beFormId], references: [id])
    beFormId                String
    renderer                QuestionRenderer
    answer                  String
    finalRating             Int
    reviewed                Boolean
    done                    Boolean
    strengths               FormQuestionStrength[]
    improvements            FormQuestionImprovement[]
    formQuestionComments    FormQuestionComment[]
    formQuestionVotes       FormQuestionVote[]
    questionResources       QuestionResource[]
    formQuestionWhiteboards FormQuestionWhiteboard[]
}

model FormQuestionStrength {
    id             String       @id @default(cuid())
    strength       String
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
}

model FormQuestionImprovement {
    id             String       @id @default(cuid())
    improvement    String
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
}

model FormQuestionComment {
    id             String       @id @default(cuid())
    comment        String
    createdBy      User         @relation(fields: [createdById], references: [id])
    createdById    String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
    threadItems    ThreadItem[]
}

model ThreadItem {
    id                    String              @id @default(cuid())
    text                  String
    formQuestionComment   FormQuestionComment @relation(fields: [formQuestionCommentId], references: [id])
    formQuestionCommentId String
    createdBy             User                @relation(fields: [createdById], references: [id])
    createdById           String
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
}

model FormQuestionVote {
    id             String       @id @default(cuid())
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
    user           User         @relation(fields: [userId], references: [id])
    userId         String
    voting         Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model QuestionResource {
    id             String       @id @default(cuid())
    name           String
    url            String
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
    createdBy      User         @relation(fields: [createdById], references: [id])
    createdById    String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model FormTemplate {
    id                String             @id @default(cuid())
    name              String
    createdBy         User               @relation(fields: [createdById], references: [id])
    createdById       String
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    templateResources TemplateResource[]
}

model TemplateResource {
    id             String       @id @default(cuid())
    question       Question     @relation(fields: [questionId], references: [id])
    questionId     String
    resourceUrl    String
    formTemplate   FormTemplate @relation(fields: [formTemplateId], references: [id])
    formTemplateId String
    createdBy      User         @relation(fields: [createdById], references: [id])
    createdById    String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Whiteboard {
    id                      String                   @id @default(cuid())
    name                    String
    state                   Json
    createdBy               User                     @relation(fields: [createdById], references: [id])
    createdById             String
    beForm                  BEForm                   @relation(fields: [beFormId], references: [id])
    beFormId                String
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    formQuestionWhiteboards FormQuestionWhiteboard[]
}

model FormQuestionWhiteboard {
    id             String       @id @default(cuid())
    formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id])
    formQuestionId String
    whiteboard     Whiteboard   @relation(fields: [whiteboardId], references: [id])
    whiteboardId   String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model AuditLog {
    id         String   @id @default(cuid())
    action     String
    formUser   FormUser @relation(fields: [formUserId], references: [id])
    formUserId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

enum UserRole {
    superadmin
    adminstrator
    consultant
    stakeholder
}

enum RoleInOrg {
    consultant
    hm_stakeholder
    stakeholder
}

enum QuestionRenderer {
    part_1
    part_2
    part_3
}

// enum FormSection {
//     part_1
//     part_2_leadership
//     part_2_customers
//     part_2_strategy
//     part_2_people
//     part_2_process
//     part_2_knowledge
//     part_3_customer_indicatiors
//     part_3_financial_indicators
//     part_3_people_indicators
//     part_3_operational_indicators
// }

//subject to be changed
enum Sector {
    construction
    manufacturing
    services
    wholesale_retail
    transportation_storage
    accomodation_food
    information_communication
    financial_insurance
    real_estate
    professional
    administrative
    public_admin
    education
    health_social
    arts_entertainment
    other
}